{"name": "Тест получения списка заказов пользователя без авторизации", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable", "trace": "func = <staticmethod(<function Base.get_method at 0x0000022BDD4599E0>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n>           sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:1388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:2564: in _signature_from_callable\n    return _signature_from_builtin(sigcls, obj,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'inspect.Signature'>, func = <staticmethod(<function Base.get_method at 0x0000022BDD4599E0>)>, skip_bound_arg = False\n\n    def _signature_from_builtin(cls, func, skip_bound_arg=True):\n        \"\"\"Private helper function to get signature for\n        builtin callables.\n        \"\"\"\n    \n        if not _signature_is_builtin(func):\n            raise TypeError(\"{!r} is not a Python builtin \"\n                            \"function\".format(func))\n    \n        s = getattr(func, \"__text_signature__\", None)\n        if not s:\n>           raise ValueError(\"no signature found for builtin {!r}\".format(func))\nE           ValueError: no signature found for builtin <staticmethod(<function Base.get_method at 0x0000022BDD4599E0>)>\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:2363: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_get_orders.TestGetOrders object at 0x0000022BDD46E570>, orders = <api_methods.orders.Orders object at 0x0000022BDD590F50>\n\n    @allure.title('Тест получения списка заказов пользователя без авторизации')\n    @allure.description('Тест проверяет ответы API на попытку получить список заказов пользователя без авторизации')\n    def test_get_orders_user_without_auth(self, orders):\n>       response = orders.get_orders()\n\ntests\\test_get_orders.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_methods\\orders.py:29: in get_orders\n    response = self.get_method(EndPoints.GET_AND_CREATE_NEW_ORDER, headers=headers)\n.venv\\Lib\\site-packages\\allure_commons\\utils.py:231: in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <staticmethod(<function Base.get_method at 0x0000022BDD4599E0>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n            sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n        except Exception as ex:\n            # Most of the times 'signature' will raise ValueError.\n            # But, it can also raise AttributeError, and, maybe something\n            # else. So to be fully backwards compatible, we catch all\n            # possible exceptions here, and reraise a TypeError.\n>           raise TypeError('unsupported callable') from ex\nE           TypeError: unsupported callable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:1398: TypeError"}, "description": "Тест проверяет ответы API на попытку получить список заказов пользователя без авторизации", "steps": [{"name": "Получаем список заказов", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable\n", "trace": "  File \"C:\\Users\\Oleg\\practicum\\diplom2\\Diplom_2\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Oleg\\practicum\\diplom2\\Diplom_2\\api_methods\\orders.py\", line 29, in get_orders\n    response = self.get_method(EndPoints.GET_AND_CREATE_NEW_ORDER, headers=headers)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Oleg\\practicum\\diplom2\\Diplom_2\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 189, in impl\n    params = func_parameters(func, *a, **kw)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Oleg\\practicum\\diplom2\\Diplom_2\\.venv\\Lib\\site-packages\\allure_commons\\utils.py\", line 231, in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Oleg\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py\", line 1398, in getfullargspec\n    raise TypeError('unsupported callable') from ex\n"}, "parameters": [{"name": "token", "value": "None"}], "start": 1727011668661, "stop": 1727011668661}], "start": 1727011668661, "stop": 1727011668662, "uuid": "bbc7ea67-5812-44be-a2e0-2f025525788d", "historyId": "37effed49fd0570e3392b4e3d361efec", "testCaseId": "37effed49fd0570e3392b4e3d361efec", "fullName": "tests.test_get_orders.TestGetOrders#test_get_orders_user_without_auth", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_get_orders"}, {"name": "subSuite", "value": "TestGetOrders"}, {"name": "host", "value": "DESKTOP-FIK3TT4"}, {"name": "thread", "value": "18408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_get_orders"}]}